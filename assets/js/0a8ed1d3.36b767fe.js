"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[48],{876:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>u});var a=t(2784);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},l=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),g=p(t),u=o,f=g["".concat(s,".").concat(u)]||g[u]||d[u]||i;return t?a.createElement(f,r(r({ref:n},l),{},{components:t})):a.createElement(f,r({ref:n},l))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=g;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,r[1]=c;for(var p=2;p<i;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},5248:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var a=t(7896),o=(t(2784),t(876));const i={id:"advanced-configuration",title:"Advanced Configuration"},r=void 0,c={unversionedId:"advanced-configuration",id:"advanced-configuration",title:"Advanced Configuration",description:"The .config/ directory holds the preferred configuration for the different tools",source:"@site/../docs/advanced-configuration.md",sourceDirName:".",slug:"/advanced-configuration",permalink:"/plugin-tools/docs/advanced-configuration",draft:!1,editUrl:"https://github.com/grafana/plugin-tools/edit/main/docusaurus/website/../docs/advanced-configuration.md",tags:[],version:"current",frontMatter:{id:"advanced-configuration",title:"Advanced Configuration"},sidebar:"docs",previous:{title:"Signing Your Plugin",permalink:"/plugin-tools/docs/signing-your-plugin"},next:{title:"Nested Plugins",permalink:"/plugin-tools/docs/nested-plugins"}},s={},p=[{value:"How to extend the basic configs?",id:"how-to-extend-the-basic-configs",level:2},{value:"Extending the ESLint config",id:"extending-the-eslint-config",level:3},{value:"Extending the Prettier config",id:"extending-the-prettier-config",level:3},{value:"Extending the Jest config",id:"extending-the-jest-config",level:3},{value:"ESM errors with Jest",id:"esm-errors-with-jest",level:4},{value:"Extending the TypeScript config",id:"extending-the-typescript-config",level:3},{value:"Extending the Webpack config",id:"extending-the-webpack-config",level:3},{value:"1. Create a new Webpack configuration file",id:"1-create-a-new-webpack-configuration-file",level:4},{value:"2. Merge the basic config provided by Grafana and your custom setup",id:"2-merge-the-basic-config-provided-by-grafana-and-your-custom-setup",level:4},{value:"3. Update the <code>package.json</code> to use the new Webpack config",id:"3-update-the-packagejson-to-use-the-new-webpack-config",level:4},{value:"Configure grafana image to use when running docker",id:"configure-grafana-image-to-use-when-running-docker",level:3}],l={toc:p};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},".config/")," directory holds the preferred configuration for the different tools\nthat are used to develop, test and build the project."),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"In order to make updates easier do ",(0,o.kt)("strong",{parentName:"p"},"not")," edit files in the ",(0,o.kt)("inlineCode",{parentName:"p"},".config")," directory to extend configuration. Instead follow the directions in this article to customise the tooling configurations.")),(0,o.kt)("h2",{id:"how-to-extend-the-basic-configs"},"How to extend the basic configs?"),(0,o.kt)("p",null,"First note that you are doing this at your own risk and that extending any of the basic configuration can lead\nto issues around working with the project."),(0,o.kt)("h3",{id:"extending-the-eslint-config"},"Extending the ESLint config"),(0,o.kt)("p",null,"Edit the ",(0,o.kt)("inlineCode",{parentName:"p"},".eslintrc")," file in the project root in order to extend the ESLint configuration."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  // Eslint configuration provided by @grafana/create-plugin\n  "extends": "./.config/.eslintrc",\n  "rules": {\n    "react/prop-types": "off"\n  }\n}\n')),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"extending-the-prettier-config"},"Extending the Prettier config"),(0,o.kt)("p",null,"Edit the ",(0,o.kt)("inlineCode",{parentName:"p"},".prettierrc.js")," file in the project root in order to extend the Prettier configuration."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"module.exports = {\n  // Prettier configuration provided by @grafana/create-plugin\n  ...require('./.config/.prettierrc.js'),\n  semi: false,\n};\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"extending-the-jest-config"},"Extending the Jest config"),(0,o.kt)("p",null,"There are two configuration in the project root that belong to Jest: ",(0,o.kt)("inlineCode",{parentName:"p"},"jest-setup.js")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"jest.config.js"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"jest-setup.js"),":")," A file that is run before each test file in the suite is executed. We are using it to\nset up the Jest DOM for the testing library and to apply some polyfills. (",(0,o.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/configuration#setupfilesafterenv-array"},"link to Jest docs"),")"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"jest.config.js"),":")," The main Jest configuration file that extends the Grafana recommended setup. (",(0,o.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/configuration"},"link to Jest docs"),")"),(0,o.kt)("h4",{id:"esm-errors-with-jest"},"ESM errors with Jest"),(0,o.kt)("p",null,"A common issue found with the current jest config involves importing an npm package which only offers an ESM build. These packages cause jest to error with ",(0,o.kt)("inlineCode",{parentName:"p"},"SyntaxError: Cannot use import statement outside a module"),". To work around this we provide a list of known packages to pass to the ",(0,o.kt)("inlineCode",{parentName:"p"},"[transformIgnorePatterns](https://jestjs.io/docs/configuration#transformignorepatterns-arraystring)")," jest configuration property. If need be this can be extended in the following way:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"process.env.TZ = 'UTC';\nconst { grafanaESModules, nodeModulesToTransform } = require('./.config/jest/utils');\n\nmodule.exports = {\n  // Jest configuration provided by @grafana/create-plugin\n  ...require('./.config/jest.config'),\n  // Inform jest to only transform specific node_module packages.\n  transformIgnorePatterns: [nodeModulesToTransform([...grafanaESModules, 'packageName'])],\n};\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"extending-the-typescript-config"},"Extending the TypeScript config"),(0,o.kt)("p",null,"Edit the ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," file in the project root in order to extend the TypeScript configuration."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  // Typescript configuration provided by @grafana/create-plugin\n  "extends": "./.config/tsconfig.json",\n  "compilerOptions": {\n    "preserveConstEnums": true\n  }\n}\n')),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"extending-the-webpack-config"},"Extending the Webpack config"),(0,o.kt)("p",null,"Follow these steps to extend the basic Webpack configuration that lives under ",(0,o.kt)("inlineCode",{parentName:"p"},".config/"),":"),(0,o.kt)("h4",{id:"1-create-a-new-webpack-configuration-file"},"1. Create a new Webpack configuration file"),(0,o.kt)("p",null,"Create a new config file that is going to extend the basic one provided by Grafana.\nIt can live in the project root, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"webpack.config.ts"),"."),(0,o.kt)("h4",{id:"2-merge-the-basic-config-provided-by-grafana-and-your-custom-setup"},"2. Merge the basic config provided by Grafana and your custom setup"),(0,o.kt)("p",null,"We are going to use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/survivejs/webpack-merge"},"webpack-merge")," for this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// webpack.config.ts\nimport type { Configuration } from 'webpack';\nimport { merge } from 'webpack-merge';\nimport grafanaConfig from './.config/webpack/webpack.config';\n\nconst config = async (env): Promise<Configuration> => {\n  const baseConfig = await grafanaConfig(env);\n\n  return merge(baseConfig, {\n    // Add custom config here...\n    output: {\n      asyncChunks: true,\n    },\n  });\n};\n\nexport default config;\n")),(0,o.kt)("h4",{id:"3-update-the-packagejson-to-use-the-new-webpack-config"},"3. Update the ",(0,o.kt)("inlineCode",{parentName:"h4"},"package.json")," to use the new Webpack config"),(0,o.kt)("p",null,"We need to update the ",(0,o.kt)("inlineCode",{parentName:"p"},"scripts")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," to use the extended Webpack configuration."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Update for ",(0,o.kt)("inlineCode",{parentName:"strong"},"build"),":")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'-"build": "webpack -c ./.config/webpack/webpack.config.ts --env production",\n+"build": "webpack -c ./webpack.config.ts --env production",\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Update for ",(0,o.kt)("inlineCode",{parentName:"strong"},"dev"),":")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'-"dev": "webpack -w -c ./.config/webpack/webpack.config.ts --env development",\n+"dev": "webpack -w -c ./webpack.config.ts --env development",\n')),(0,o.kt)("h3",{id:"configure-grafana-image-to-use-when-running-docker"},"Configure grafana image to use when running docker"),(0,o.kt)("p",null,"By default ",(0,o.kt)("inlineCode",{parentName:"p"},"grafana-enterprise")," will be used as the docker image for all docker related commands. If you want to override this behaviour simply alter the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," by adding the following build arg ",(0,o.kt)("inlineCode",{parentName:"p"},"grafana_image"),". "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3.7'\n\nservices:\n  grafana:\n    container_name: 'myorg-basic-app'\n    build:\n      context: ./.config\n      args:\n        grafana_version: ${GRAFANA_VERSION:-9.1.2}\n        grafana_image: ${GRAFANA_IMAGE:-grafana}\n")),(0,o.kt)("p",null,"In this example we are assigning the environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"GRAFANA_IMAGE")," to the build arg ",(0,o.kt)("inlineCode",{parentName:"p"},"grafana_image")," with a default value of ",(0,o.kt)("inlineCode",{parentName:"p"},"grafana"),". This will give you the possibility to set the value while running the docker-compose commands which might be convinent in some scenarios."),(0,o.kt)("hr",null))}d.isMDXComponent=!0}}]);