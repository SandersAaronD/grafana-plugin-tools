"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[273],{876:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=a,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8268:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>k,contentTitle:()=>f,default:()=>O,frontMatter:()=>g,metadata:()=>h,toc:()=>v});var r=t(7896),a=(t(2784),t(876));const o={toc:[]},i="wrapper";function l(e){let{components:n,...t}=e;return(0,a.kt)(i,(0,r.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"GRAFANA_VERSION=8.5.5 npm run server\n")))}l.isMDXComponent=!0;const c={toc:[]},s="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(s,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"GRAFANA_VERSION=8.5.5 pnpm run server\n")))}p.isMDXComponent=!0;const u={toc:[]},d="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"GRAFANA_VERSION=8.5.5 yarn run server\n")))}m.isMDXComponent=!0;const g={id:"docker",title:"Docker Development Environment"},f=void 0,h={unversionedId:"docker",id:"docker",title:"Docker Development Environment",description:"The create-plugin tool includes a development environment featuring Docker. It allows you to start an instance of the Grafana application for plugin developers against which you can code.",source:"@site/../docs/docker.mdx",sourceDirName:".",slug:"/docker",permalink:"/plugin-tools/docs/docker",draft:!1,editUrl:"https://github.com/grafana/plugin-tools/edit/main/docusaurus/website/../docs/docker.mdx",tags:[],version:"current",frontMatter:{id:"docker",title:"Docker Development Environment"},sidebar:"docs",previous:{title:"Backend",permalink:"/plugin-tools/docs/backend"},next:{title:"Continuous Integration",permalink:"/plugin-tools/docs/ci"}},k={},v=[{value:"Why use the Docker environment",id:"why-use-the-docker-environment",level:2},{value:"Get started with Docker",id:"get-started-with-docker",level:2},{value:"Configure the Grafana version",id:"configure-the-grafana-version",level:3},{value:"Configure the Grafana image",id:"configure-the-grafana-image",level:3}],y=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},b=y("SyncCommand"),w=y("CodeSnippets"),N={toc:v},C="wrapper";function O(e){let{components:n,...t}=e;return(0,a.kt)(C,(0,r.Z)({},N,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"create-plugin")," tool includes a development environment featuring ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker"),". It allows you to start an instance of the Grafana application for plugin developers against which you can code."),(0,a.kt)("h2",{id:"why-use-the-docker-environment"},"Why use the Docker environment"),(0,a.kt)("p",null,"We have chosen to use Docker because it simplifies the process of creating, deploying, and running applications. It allows you to create consistent and isolated environments for your plugin. This makes it easy to manage dependencies and ensure that the plugin runs the same way across different machines."),(0,a.kt)("p",null,"With the ",(0,a.kt)("inlineCode",{parentName:"p"},"create-plugin")," tool, the Docker container is configured with the necessary variables to allow easy access to Grafana and to load plugins without the need for them to be signed. The plugin tool also adds a live reload feature that allows you to make your frontend code changes to trigger refreshes in the browser."),(0,a.kt)("h2",{id:"get-started-with-docker"},"Get started with Docker"),(0,a.kt)("p",null,"To start your plugin development project, run the following commands in the order listed:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)(b,{cmd:"install",mdxType:"SyncCommand"}),": Installs frontend dependencies."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)(b,{cmd:"run dev",mdxType:"SyncCommand"}),": Builds and watches the plugin frontend code."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"mage -v build:linux"),": Builds the plugin backend code. Rerun this command every time that you edit your backend files."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)(b,{cmd:"run server",mdxType:"SyncCommand"}),": Starts a Grafana development server running on [http://localhost:3000](http://localhost:3000). Restart this command each time you run `mage` to run your new backend code.")),(0,a.kt)("h3",{id:"configure-the-grafana-version"},"Configure the Grafana version"),(0,a.kt)("p",null,"To test a plugin across different versions of Grafana, set an environment variable. Use ",(0,a.kt)("inlineCode",{parentName:"p"},"GRAFANA_VERSION")," to set the Grafana version:"),(0,a.kt)(w,{snippets:[{component:l,label:"npm"},{component:p,label:"pnpm"},{component:m,label:"yarn"}],groupId:"package-manager",queryString:"current-package-manager",mdxType:"CodeSnippets"}),(0,a.kt)("h3",{id:"configure-the-grafana-image"},"Configure the Grafana image"),(0,a.kt)("p",null,"The default Docker image in the plugin tool is ",(0,a.kt)("inlineCode",{parentName:"p"},"grafana-enterprise"),". If you want to override this image, alter the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," by adding the ",(0,a.kt)("inlineCode",{parentName:"p"},"grafana_image")," build argument like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3.7'\n\nservices:\n  grafana:\n    container_name: 'myorg-basic-app'\n    build:\n      context: ./.config\n      args:\n        grafana_version: ${GRAFANA_VERSION:-9.1.2}\n        grafana_image: ${GRAFANA_IMAGE:-grafana}\n")),(0,a.kt)("p",null,"This example assigns the environment variable ",(0,a.kt)("inlineCode",{parentName:"p"},"GRAFANA_IMAGE")," to the build arg ",(0,a.kt)("inlineCode",{parentName:"p"},"grafana_image")," with a default value of ",(0,a.kt)("inlineCode",{parentName:"p"},"grafana"),". This gives you the option to set the value when running ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose")," commands."))}O.isMDXComponent=!0}}]);