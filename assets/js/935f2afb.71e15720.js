"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Getting Started","items":[{"type":"link","label":"Getting Started","href":"/plugin-tools/docs/getting-started","docId":"getting-started"},{"type":"link","label":"Creating a Plugin","href":"/plugin-tools/docs/creating-a-plugin","docId":"creating-a-plugin"},{"type":"link","label":"Folder Structure","href":"/plugin-tools/docs/folder-structure","docId":"folder-structure"},{"type":"link","label":"Updating to New Releases","href":"/plugin-tools/docs/updating-to-new-releases","docId":"updating-to-new-releases"},{"type":"link","label":"Migrating from Toolkit","href":"/plugin-tools/docs/migrating-from-toolkit","docId":"migrating-from-toolkit"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Development","items":[{"type":"link","label":"Frontend","href":"/plugin-tools/docs/frontend","docId":"frontend"},{"type":"link","label":"Backend","href":"/plugin-tools/docs/backend","docId":"backend"},{"type":"link","label":"Development Environment","href":"/plugin-tools/docs/docker","docId":"docker"},{"type":"link","label":"Continuous Integration","href":"/plugin-tools/docs/ci","docId":"ci"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Distribution","items":[{"type":"link","label":"Distributing Your Plugin","href":"/plugin-tools/docs/distributing-your-plugin","docId":"distributing-your-plugin"},{"type":"link","label":"Signing Your Plugin","href":"/plugin-tools/docs/signing-your-plugin","docId":"signing-your-plugin"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Advanced Usage","items":[{"type":"link","label":"Advanced Configuration","href":"/plugin-tools/docs/advanced-configuration","docId":"advanced-configuration"},{"type":"link","label":"Nested Plugins","href":"/plugin-tools/docs/nested-plugins","docId":"nested-plugins"}],"collapsed":true,"collapsible":true}]},"docs":{"advanced-configuration":{"id":"advanced-configuration","title":"Advanced Configuration","description":"The .config/ directory holds the preferred configuration for the different tools used to develop, test, and build a Grafana plugin. Although you can make changes, we recommend against doing so. Instead, follow the guidance in this topic to customize your tooling configs.","sidebar":"docs"},"backend":{"id":"backend","title":"Backend","description":"The backend part of a Grafana plugin is written in Go. To keep the Grafana plugin SDK for Go up to date:","sidebar":"docs"},"ci":{"id":"ci","title":"Continuous Integration","description":"@grafana/create-plugin comes with several GitHub workflows that help automate the plugin development process.","sidebar":"docs"},"creating-a-plugin":{"id":"creating-a-plugin","title":"Creating a Plugin","description":"To create a new Grafana plugin run the following command in your shell:","sidebar":"docs"},"distributing-your-plugin":{"id":"distributing-your-plugin","title":"Distributing Your Plugin","description":"To distribute a Grafana plugin either to the community or privately, the plugin must be signed so the Grafana application can verify its authenticity. You can do this with the @grafana/sign-plugin package.","sidebar":"docs"},"docker":{"id":"docker","title":"Docker Development Environment","description":"@grafana/create-plugin includes a development environment that uses Docker to start an instance of the Grafana application for plugin developers to code against.","sidebar":"docs"},"e2e-tests":{"id":"e2e-tests","title":"E2E Tests","description":""},"editor-setup":{"id":"editor-setup","title":"Editor Setup","description":""},"folder-structure":{"id":"folder-structure","title":"Folder Structure","description":"After creation, your project should look similar to this:","sidebar":"docs"},"frontend":{"id":"frontend","title":"Frontend","description":"The frontend part of a Grafana plugin is written in Typescript with React as the view library. Within the plugin directory, you can run:","sidebar":"docs"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"Create Plugin is the officially supported way to develop plugins to extend Grafana in amazing ways! It offers a modern build setup with zero configuration.","sidebar":"docs"},"migrating-from-toolkit":{"id":"migrating-from-toolkit","title":"Migrating from Grafana Toolkit","description":"The @grafana/toolkit tool is now deprecated. If you are still using @grafana/toolkit to scaffold and develop plugins, follow this guide to make the jump to our newest plugin tools.","sidebar":"docs"},"nested-plugins":{"id":"nested-plugins","title":"Nested Plugins","description":"Grafana app plugins can nest frontend datasource and panel plugins making it easy to ship a complete user experience. To take advantage of this feature first scaffold an app plugin using @grafana/create-plugin:","sidebar":"docs"},"production-builds":{"id":"production-builds","title":"Production Builds","description":""},"signing-your-plugin":{"id":"signing-your-plugin","title":"Signing Your Plugin","description":"Grafana requires all plugins to be signed so that we can verify their authenticity with signature verification.","sidebar":"docs"},"unit-tests":{"id":"unit-tests","title":"Unit Tests","description":""},"updating-to-new-releases":{"id":"updating-to-new-releases","title":"Updating to New Releases","description":"To update an existing plugin to use a newer version of the create-plugin tool, run the following command:","sidebar":"docs"}}}')}}]);